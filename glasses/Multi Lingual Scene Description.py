import cv2
import os
import tempfile
import speech_recognition as sr
from gtts import gTTS
import pyglet
from google import genai

# Function to speak text using Google TTS
def speak(text, lang='hi'):
    print(f"ЁЯФК рдмреЛрд▓ рд░рд╣рд╛ рд╣реВрдБ: {text}")  # Print in Hindi
    tts = gTTS(text=text, lang=lang, slow=False)
    tts.save("speech.mp3")  # Save the audio to a temporary file

    # Load and play the audio using pyglet
    sound = pyglet.media.load("speech.mp3", streaming=False)
    sound.play()

    # Wait for the sound to finish before continuing
    pyglet.app.run()

# Gemini API Key
client = genai.Client(api_key="Your_API_KEY")

# Speech recognizer
recognizer = sr.Recognizer()

print("ЁЯж╛ рдЬреЗрдорд┐рдиреА рд╡рд┐рдЬрд╝рди рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рддреИрдпрд╛рд░ рд╣реИ")
print("ЁЯЧгя╕П рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ, 'quit' рдХрд╣рдиреЗ рд╕реЗ рдмрдВрдж рд╣реЛрдЧрд╛\n")

while True:
    try:
        print("\nЁЯОЩя╕П рд╕рд╡рд╛рд▓ рд╕реБрди рд░рд╣рд╛ рд╣реВрдБ...")
        with sr.Microphone() as source:
            audio = recognizer.listen(source)
        command = recognizer.recognize_google(audio, language="hi-IN")  # Hindi Language
        print("ЁЯФК рдЖрдкрдиреЗ рдХрд╣рд╛:", command)

        if "quit" in command.lower():
            speak("рдЕрд▓рд╡рд┐рджрд╛!")
            break

        # Capture webcam frame
        cap = cv2.VideoCapture(0)
        ret, frame = cap.read()
        cap.release()

        if not ret:
            print("тЭМ рдХреИрдорд░реЗ рд╕реЗ рдЪрд┐рддреНрд░ рдирд╣реАрдВ рдорд┐рд▓ рдкрд╛рдпрд╛ред")
            speak("рдХреИрдорд░реЗ рд╕реЗ рдЪрд┐рддреНрд░ рдирд╣реАрдВ рдорд┐рд▓ рдкрд╛рдпрд╛ред")
            continue

        # Save image to temporary file
        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as f:
            image_path = f.name
            cv2.imwrite(image_path, frame)

        # Upload image to Gemini
        gemini_image = client.files.upload(file=image_path)

        # Generate content from Gemini
        response = client.models.generate_content(
            model="gemini-2.0-flash",
            contents=[gemini_image, command]
        )
        answer = response.text.strip()
        print("ЁЯдЦ рдЬреЗрдорд┐рдиреА:", answer)
        speak(answer)

        # Clean up
        os.remove(image_path)

    except sr.UnknownValueError:
        print("тЭМ рдЖрд╡рд╛рдЬрд╝ рдирд╣реАрдВ рд╕рдордЭ рдкрд╛рдпрд╛ред")
        speak("рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред")
    except sr.RequestError as e:
        print(f"тЭМ рд╕реНрдкреАрдЪ рд░рд┐рдХрдЧреНрдирд┐рд╢рди рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        speak("рд╕реНрдкреАрдЪ рд╕реЗрд╡рд╛ рдореЗрдВ рдХреЛрдИ рддреНрд░реБрдЯрд┐ рд╣реИред")
    except Exception as e:
        print(f"тЭМ рдЬреЗрдорд┐рдиреА рддреНрд░реБрдЯрд┐: {e}")
        speak("рдХреЛрдИ рддреНрд░реБрдЯрд┐ рд╣реБрдИред")

